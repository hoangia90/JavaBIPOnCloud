/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.22
 * Generated at: 2019-10-25 11:27:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import monitor.Switch;
import javax.servlet.http.HttpServletRequest;

public final class monitor_002dindex_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Users/Gia/Desktop/JavaBIP-Heroku/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/HerokuDemo/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153377882000L));
    _jspx_dependants.put("/styles.css", Long.valueOf(1570802076425L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1570456686371L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("monitor.Switch");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %-->\r\n");
      out.write("<!--%@ taglib uri=\"http://java.sun.com/jstl/core\" prefix=\"c\" %-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("\t<title>Monitor</title>\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"styles.css\" />\r\n");
      out.write("\t<!-- <link rel=\"stylesheet\" href=\"");
      out.print( request.getContextPath() );
      out.write("/styles.css\" /> -->\r\n");
      out.write("\t<!-- <style>");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("  background-color: powderblue;\r\n");
      out.write("}\r\n");
      out.write("h1 {\r\n");
      out.write("  color: blue;\r\n");
      out.write("}\r\n");
      out.write("p {\r\n");
      out.write("  color: royalblue;\r\n");
      out.write("}");
      out.write("</style> -->\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t \r\n");
      out.write("\t \r\n");
      out.write("\t \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<form action=\"BIPMonitor\" method=\"GET\">\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- ");
      out.print( request.getContextPath() );
      out.write(" -->\r\n");
      out.write("\t<!-- <form action=\"moni\" method=\"GET\"> -->\r\n");
      out.write("\t<!-- <form action=\"BIPMonitor\" method=\"GET\"> -->\r\n");
      out.write("\t<!-- p> Current server : ");
      out.print(request.getAttribute("currentServer") );
      out.write(" </p -->\r\n");
      out.write("\t<!-- p> Add server : <input type = \"text\" name = \"serverAddress\" value= \"https://compute1.herokuapp.com/request\"> </p -->\r\n");
      out.write("\t<!-- p> Add server : <input type = \"text\" name = \"serverAddress\" value= \"http://localhost:8080/javabip-itest/req\"> </p -->\r\n");
      out.write("\t\r\n");
      out.write("\t<fieldset>\r\n");
      out.write("\t\t<legend>Servers</legend>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tServer address: \r\n");
      out.write("\t\t");

		    String scheme = request.getScheme() + "://";
		    String serverName = request.getServerName();
		    String serverPort = (request.getServerPort() == 80) ? "" : ":" + request.getServerPort();
		    String contextPath = request.getContextPath();
		    String baseUrl = scheme + serverName + serverPort + contextPath;
		    String computeUrl = scheme + serverName + serverPort + contextPath + "/compute";
		    String compute2Url = scheme + serverName + serverPort + contextPath + "/compute2";
		
      out.write("\r\n");
      out.write("\t\t<select name = \"serverAddress\">\r\n");
      out.write("\t\t\t<option value=\"");
      out.print( computeUrl );
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print( computeUrl );
      out.write(" </option>\r\n");
      out.write("\t\t\t<option value=\"");
      out.print( compute2Url );
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print( compute2Url );
      out.write(" </option>\r\n");
      out.write("\t  \t\t<!-- option value=\"http://localhost:8080/javabip-itest/req\"> http://localhost:8080/javabip-itest/req </option -->\r\n");
      out.write("\t    \t<option value=\"https://compute1.herokuapp.com/compute\"> https://compute1.herokuapp.com/request </option>\r\n");
      out.write("\t    \t<option value=\"https://compute2.herokuapp.com/compute\"> https://compute2.herokuapp.com/request </option>\r\n");
      out.write("\t  \t</select>\r\n");
      out.write("\t  \t<input type=\"submit\" name=\"add\" value=\"Add server\"> \r\n");
      out.write("\r\n");
      out.write("\t\t<br/><br/>\t  \r\n");
      out.write("\r\n");
      out.write("\t  \tAdded server:\r\n");
      out.write("\t  \t<select name=\"addedServer\">\r\n");
      out.write("\t  \t\t");

	  		List<String> serverList = Switch.serverslist;
	  		for (String serverAddress : serverList) {
	  		
      out.write("\r\n");
      out.write("\t\t \t\t<option value=\"");
      out.print(serverAddress);
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print(serverAddress);
      out.write(" </option>\r\n");
      out.write("\t  \t\t");

			}
	  		
      out.write("\r\n");
      out.write("\t  \t</select>\r\n");
      out.write("\t  \t<input type=\"submit\" name=\"chooseServer\" value=\"Choose initial server\"> \r\n");
      out.write("\t  \t<input type=\"submit\" name=\"remove\" value=\"Remove all servers\"><br/>\r\n");
      out.write("\t  \t\r\n");
      out.write("\t  \t<br/><br/>\t\r\n");
      out.write("\t  \t\r\n");
      out.write("\t  \tCurrent server : ");
      out.print(request.getAttribute("currentServer") );
      out.write("\r\n");
      out.write("\t  \t\r\n");
      out.write("\t  \t<br/><br/>\r\n");
      out.write("\t  \t\r\n");
      out.write("\t  \t<!-- input type=\"submit\" name=\"switchConfirm\" value=\"Confirm\" -->\r\n");
      out.write("\t  \t\r\n");
      out.write("\t</fieldset>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- p>\t<input type=\"submit\" name=\"add\" value=\"Add server\"> <input type=\"submit\" name=\"remove\" value=\"Remove all servers\"> </p -->\r\n");
      out.write("\t\r\n");
      out.write("\t<br/><br/><br/><br/><br/>\r\n");
      out.write("\t\r\n");
      out.write(" \t<fieldset>\r\n");
      out.write("    \t<legend>Server Test</legend>\r\n");
      out.write("    \tThe current value : ");
      out.print(request.getAttribute("randomNumber") );
      out.write("<br/>\r\n");
      out.write("    \tUsage : ");
      out.print(request.getAttribute("counter") );
      out.write(' ');
      out.write('/');
      out.write(' ');
      out.print(request.getAttribute("limit") );
      out.write("<br/>\r\n");
      out.write("    \t<input type=\"submit\" name=\"compute\" value=\"Compute random number !\">\r\n");
      out.write("    \t<br/><br/>\r\n");
      out.write("    \tReset the counter of sever:\r\n");
      out.write("\t  \t<select name=\"resetServerlist\">\r\n");
      out.write("\t  \t\t");

	  		for (String serverAddress : serverList) {
	  		
      out.write("\r\n");
      out.write("\t\t \t\t<option value=\"");
      out.print(serverAddress);
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print(serverAddress);
      out.write(" </option>\r\n");
      out.write("\t  \t\t");

			}
	  		
      out.write("\r\n");
      out.write("\t  \t</select>\r\n");
      out.write("    \t<input type=\"submit\" name=\"resetServerCounter\" value=\"Reset server counter\">\r\n");
      out.write("    \t<input type=\"submit\" name=\"resetComponents\" value=\"Reset components\">\r\n");
      out.write("<!--     \t<br/><br/>\r\n");
      out.write("    \t<input type=\"submit\" name=\"resetAll\" value=\"Reset all\"><br/> -->\r\n");
      out.write("  \t</fieldset>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- The current state of the counter:  \"${counter}\" -->\r\n");
      out.write("\t<!-- p> The current value : ");
      out.print(request.getAttribute("randomNumber") );
      out.write(" </p -->\r\n");
      out.write("\t<!-- p> Usage : ");
      out.print(request.getAttribute("counter") );
      out.write(' ');
      out.write('/');
      out.write(' ');
      out.print(request.getAttribute("limit") );
      out.write(" </p -->\r\n");
      out.write("\t<!-- p> <input type=\"submit\" name=\"compute\" value=\"Compute random number !\"> </p -->\r\n");
      out.write("\t<!-- input type=\"hidden\" name=\"counter\" value=\"${counter}\" -->\r\n");
      out.write("\t\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
